let numSegments = 10,
  x = [],
  y = [],
  angle = [],
  segLength = 50,
  targetX,
  targetY,
  ballX = 50, // 공 x축
  ballY = 500, // 공 y
  ballXDirection = 1,
  ballYDirection = -1,
  xtime =0.0,
  ytime = 100.0,
  increment = 0.001; // 공 스피드
let overBox = false;
let locked = false;
let xOffset = 0.0;
let yOffset = 0.0;
let noiseY;
let noiseSpeed = 0.01;
let noiseHeight = 20;

for (let i = 0; i < numSegments; i++) {
  x[i] = 0;
  y[i] = 0;
  angle[i] = 0;
}

function setup() {
  createCanvas(600, 600);
  strokeWeight(20);
  stroke(255, 100);
  rectMode(RADIUS);
  noFill();
  noiseY = height * 3 / 4;

  x[x.length - 1] = width; // 기본 x좌표 설정
  y[x.length - 1] = height/3; // 기본 y좌표 설정
}

function draw() {
  background(0,15);

  strokeWeight(20);
  ballX = ballX + 1.0 * ballXDirection;
  ballY = ballY + 0.8 * ballYDirection;
  //ballX = noise(xtime) * width;
  //ballY = noise(ytime) * height+200; //공 여기저기 랜덤으로 움직이기
  xtime += increment;
  ytime += increment;
  if (ballX > width - 30 || ballX < 30) { // 공 바다에서 벗어날 시 반대로 감
    ballXDirection *= -1;
  }
  if (ballY > height - 30 || ballY < 350) {
    ballYDirection *= -1;
  }
  ellipse(ballX, ballY, 30, 30);

  reachSegment(0, mouseX, mouseY);
  for (let i = 1; i < numSegments; i++) {
    reachSegment(i, targetX, targetY);
  }
  for (let j = x.length - 1; j >= 1; j--) {
    positionSegment(j, j - 1);
  }
  for (let k = 0; k < x.length; k++) {
    segment(x[k], y[k], angle[k], (k + 1) * 2);
  }
  
  // 상자 위에 커서가 있는지를 테스트
  if (
    mouseX > ballX - 30 &&
    mouseX < ballX + 30 &&
    mouseY > ballY - 30 &&
    mouseY < ballY + 30
  ) {
    overBox = true;
    if (!locked) {
      stroke(255);
      fill(244, 122, 158);
    }
  } else {
    stroke(156, 39, 176);
    fill(244, 122, 158);
    overBox = false;
  }
  push();
  for (let j = 0; j < 3; j++) {
    let offsetY = j * 100;
    noFill();
    stroke(0, 0, 255, 10);
    strokeWeight(height / 2);
    beginShape();
    curveVertex(0, height / 2);
    for (let i = 0; i < width; i += 50) {
      let y = noise(frameCount * noiseSpeed + i + j) * noiseHeight + noiseY + offsetY;
      curveVertex(i, y);
    }
    curveVertex(width, height / 2);
    endShape(LINES);
  }
  pop();
}

function mousePressed() {
  if (overBox) {
    locked = true;
    fill(255, 255, 255);
  } else {
    locked = false;
  }
  let xOffset = 0.0;
  let yOffset = 0.0;
  xOffset = mouseX - ballX;
  yOffset = mouseY - ballY;
}
function mouseDragged() {
  if (locked) {
    let xOffset = 0.0;
    let yOffset = 0.0;
    ballX = mouseX - xOffset;
    ballY = mouseY - yOffset;
  }
}
function mouseReleased() {
  locked = false;
}
function positionSegment(a, b) {
  x[b] = x[a] + cos(angle[a]) * segLength;
  y[b] = y[a] + sin(angle[a]) * segLength;
}

function reachSegment(i, xin, yin) {
  const dx = xin - x[i];
  const dy = yin - y[i];
  angle[i] = atan2(dy, dx);
  targetX = xin - cos(angle[i]) * segLength;
  targetY = yin - sin(angle[i]) * segLength;
}

function segment(x, y, a, sw) {
  strokeWeight(sw);
  push();
  translate(x, y);
  rotate(a);
  line(0, 0, segLength, 0);
  pop();
}
