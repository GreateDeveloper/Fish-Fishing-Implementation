let numSegments = 10,
  x = [],
  y = [],
  angle = [],
  segLength = 50,
  targetX,
  targetY,
  ballX = 50, // 공 x축
  ballY = 500, // 공 y
  ballXDirection = 1,
  ballYDirection = -1;
let overBox = false;
let locked = false;
let xOffset = 0.0;
let yOffset = 0.0;
let noiseY;
let noiseSpeed = 0.01;
let noiseHeight = 20;
let div;
for (let i = 0; i < numSegments; i++) {
  x[i] = 0;
  y[i] = 0;
  angle[i] = 0;
}

function setup() {
  div = createDiv('Score = 0');
  div.style('font-size', '20px');
  div.style('color', 'white');
  div.position(10, 0);
  
  createCanvas(600, 600);
  strokeWeight(20);
  stroke(255, 100);
  rectMode(RADIUS);
  noFill();
  noiseY = height * 3 / 4;

  x[x.length - 1] = width; // 기본 x좌표 설정
  y[x.length - 1] = height/3; // 기본 y좌표 설정
  
  
}

function draw() {

  //background(50,20); //이거때매 화면이 이상함
  strokeWeight(20);
  ballX = ballX + 1.0 * ballXDirection;
  ballY = ballY + 0.8 * ballYDirection;

  if (ballX > width - 30 || ballX < 30) { // 공 바다에서 벗어날 시 반대로 감
    ballXDirection *= -1;
  }
  if (ballY > height - 30 || ballY < 350) {
    ballYDirection *= -1;
  }
  ellipse(ballX, ballY, 30, 30);

  reachSegment(0, mouseX, mouseY);
  for (let i = 1; i < numSegments; i++) {
    reachSegment(i, targetX, targetY);
  }
  for (let j = x.length - 1; j >= 1; j--) {
    positionSegment(j, j - 1);
  }
  for (let k = 0; k < x.length; k++) {
    segment(x[k], y[k], angle[k], (k + 1) * 2);
  }
  
  // 상자 위에 커서가 있는지를 테스트
  fishCatch();

  push();
  // 바다 지형 생성
  ocean();
  pop();
  
  push();
  // 태양 
  sun();
  //초승달
  crescent();
  pop();
  // 태양 클릭시 낮
  sunClick();
  //초승달 클릭시 밤
  crescentClick();
}

function mousePressed() {
  if (overBox) {
    locked = true;
    fill(255, 255, 255);
  } else {
    locked = false;
  }
  let xOffset = 0.0;
  let yOffset = 0.0;
  xOffset = mouseX - ballX;
  yOffset = mouseY - ballY;
}
function mouseDragged() {
  if (locked) {
    let xOffset = 0.0;
    let yOffset = 0.0;
    ballX = mouseX - xOffset;
    ballY = mouseY - yOffset;
  }
}
function mouseReleased() {
  locked = false;
}
function positionSegment(a, b) {
  x[b] = x[a] + cos(angle[a]) * segLength;
  y[b] = y[a] + sin(angle[a]) * segLength;
}

function reachSegment(i, xin, yin) {
  const dx = xin - x[i];
  const dy = yin - y[i];
  angle[i] = atan2(dy, dx);
  targetX = xin - cos(angle[i]) * segLength;
  targetY = yin - sin(angle[i]) * segLength;
}

function segment(x, y, a, sw) {
  strokeWeight(sw);
  push();
  translate(x, y);
  rotate(a);
  line(0, 0, segLength, 0);
  pop();
}
function fishCatch(){
  if (
    mouseX > ballX - 30 &&
    mouseX < ballX + 30 &&
    mouseY > ballY - 30 &&
    mouseY < ballY + 30
  ) {
    overBox = true; //있을시
    if (!locked) {
      stroke(255);
      fill(244, 122, 158);
    }
  } else { //없을시
    stroke(156, 39, 176);
    fill(244, 122, 158);
    overBox = false;
  }
}
function ocean(){
  for (let j = 0; j < 3; j++) {
    let offsetY = j * 100;
    noFill();
    stroke(0, 0, 255, 10);
    strokeWeight(height / 2);
    beginShape();
    curveVertex(0, height / 2);
    for (let i = 0; i < width; i += 50) { //바다 출렁이기
      let y = noise(frameCount * noiseSpeed + i + j) * noiseHeight + noiseY + offsetY;
      curveVertex(i, y);
    }
    curveVertex(width, height / 2);
    endShape(LINES);
  }
}
function sun(){
  strokeWeight(2);
  fill(255,0,0);
  noStroke();
  ellipse(250, 50, 55, 55);
}
function crescent(){
  noStroke();
  strokeWeight(5);
  point(350, 19);
  point(332, 25);
  point(315, 40);
  point(315, 60);
  point(332, 80);
  point(350, 91);
  point(335, 60);
  point(335, 40);
  strokeWeight(1);
  
  noStroke();
  fill(255,212,0);
  beginShape();
  curveVertex(350, 19);
  curveVertex(350, 19);
  curveVertex(332, 25);
  curveVertex(315, 40);
  curveVertex(315, 60);
  curveVertex(332, 80);
  curveVertex(350, 91);
  curveVertex(335, 60);
  curveVertex(335, 40);
  curveVertex(350, 19);
  curveVertex(350, 19);
  endShape();
}
function sunClick(){
  if(mouseIsPressed){ 
    // 마우스가 원의 안쪽에 있는지 확인하기
    let c = dist(mouseX, mouseY, 250, 50);
    if (c < 22.5) {
      // 새로운 임의의 색상 고르기
      background(80,188, 223);
    }
  }
}
function crescentClick(){
  if(mouseIsPressed){
    let r = dist(mouseX, mouseY, 325, 40);
    if(r < 22.5){
      background(0);
    }
  }
}
// 낚싯대랑 물고기랑 위치 일치시
function checkFishCollision() {
  const rodHeadX = x[x.length - 1];
  const rodHeadY = y[y.length - 1];
  for (let i = 0; i < x.length - 1; i++) {
    if (x[i] === rodHeadX && y[i] === rodHeadY) {
      return true;
    }
  }
}
// 낚시 성공시  스코어 +1
function checkForScore() {
  if (x[x.length - 1] === ballX && ballY[y.length - 1] === ballY) {
    const prevScore = parseInt(scoreElem.html().substring(8));
    scoreElem.html('Score = ' + (prevScore + 1));
    x.unshift(x[0]);
    y.unshift(y[0]);
    numSegments++;
    updateFishCoordinates();
  }
}
// 물고기 랜덤 생성
function updateFishCoordinates() {
  /*
    여기서 복잡한 연산 논리가 추가된 이유는
    뱀이 10의 배수 단위로 움직이도록 설정했기 때문입니다.
    점을 너비 100과 -100 사이에 있도록 하고,
    그 위치값이 가장 가까운 10의 배수 숫자로 반올림되도록 처리하였습니다.
  */

  ballX = floor(random(0, width));
  ballY = floor(random((height-30), 350));
}
